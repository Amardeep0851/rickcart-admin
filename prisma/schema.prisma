
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Store {
  id        String      @id @default(uuid())
  name      String
  userId    String
  domain    String?     // optional custom domain
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products Product[] @relation("StoreToProduct")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Billboard {
  id        String     @id @default(uuid()) // use ulid everywhere for consistency
  title     String?
  slug      String?    @unique // optional SEO slug
  imageUrl  String
  buttonText String?
  status    Boolean    @default(true)
  link      String?
  altText   String?
  priority  Int        @default(0) // For ordering
  storeId   String
  store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories Category[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([storeId, status])
  @@map("billboards")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  status      Boolean  @default(true)
  slug        String
  description String?
  isFeatured  Boolean  @default(false)
  metaTitle       String?
  metaDescription String?
  imageUrl        String?
  sortOrder   Int      @default(0)
  parentId    String?  // self relation for nested categories
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id], onDelete: Cascade)

  billboardId String?
  billboard   Billboard? @relation(fields: [billboardId], references: [id], onDelete: SetNull)

  products Product[] @relation("CategoryToProduct")
  variants CategoryVariant[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([storeId, slug]) // Unique slug per store
  @@index([storeId, status])
  @@map("categories")
}


model Product {
  id          String  @id @default(uuid())
  name        String
  slug        String
  description String? @db.Text
  
  // Pricing
  price       Int
  comparePrice Int? // Original price for discounts
  costPrice   Int? // Your cost (for profit calculation)
  
  // Inventory
  sku         String?
  barcode     String?
  trackQuantity Boolean @default(true)
  quantity    Int     @default(0)
  lowStockAlert Int?   // Alert when stock is low
  
  // Status
  isActive    Boolean @default(true)
  isFeatured  Boolean @default(false)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  // Product attributes
  weight      Decimal?
  dimensions  Json?    // {length, width, height}
  tags        String[] // Array of tags
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  storeId     String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id], onDelete: Cascade)
  categoryId  String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  images   ProductImage[]

  @@unique([storeId, slug])
  @@index([storeId, isActive])
  @@index([categoryId])
  @@index([isFeatured])
  @@map("products")
}

model ProductImage {
  id        String @id @default(uuid())
  productId String
  url       String
  altText   String?
  sortOrder Int    @default(0)
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@map("product_images")
}

model CategoryVariant {
  id        String  @id @default(uuid())
  name      String  // e.g., "Size", "Color"
  price     Int? // Override product price
  sku       String?
  quantity  Int     @default(0)
  
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  
  value VariantValue[]  // e.g., "Large", "Red"

  @@unique([categoryId, name])
  @@index([categoryId])
  @@map("product_variants")
}

model VariantValue {
  id          String   @id @default(uuid())
  value       String   // "Small", "Medium", "Large" or "Red", "Blue", etc.
  attributeId String
  categoryVariants CategoryVariant @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}